version: '3.8'
services:
  frontend:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./frontend/local/infra/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: always
    networks:
      - app-network

  backend-infra-init:
    build:
      context: .
    volumes:
      - ./backend/local:/app
    environment:
      - AWS_DEFAULT_REGION=us-east-1
    command: [ "bash", "-c", "dos2unix /app/scripts/setup-infra.sh && chmod +x /app/scripts/setup-infra.sh && /app/scripts/setup-infra.sh" ]
    networks:
      - app-network

  api-gateway:
    build:
      context: .
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment: # used by aws sdk java v2. Ref https://docs.aws.amazon.com/sdkref/latest/guide/feature-ss-endpoints.html
      - AWS_DEFAULT_REGION=us-east-1
      - SAM_CLI_CONTAINER_CONNECTION_TIMEOUT=60
      - RUN_NATIVE=${RUN_NATIVE:-false}
      - GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
    volumes:
      - ~/.aws:/root/.aws:ro
      - ${TEMP:-/tmp}:/tmp # This needs to be added. solution: https://github.com/aws/aws-sam-cli/issues/2046#issuecomment-658965426
      - "/var/run/docker.sock:/var/run/docker.sock"  # Allow this container to interact with host machine's Docker
      - ./backend/local:/app
      - ./backend/api/target:/app/api
      - ./backend/authorizer-funq/target:/app/authorizer
    command: [ "bash", "-c", "dos2unix /app/scripts/setup-api-gateway.sh && chmod +x /app/scripts/setup-api-gateway.sh && /app/scripts/setup-api-gateway.sh" ]
    ports:
      - "8081:8080"
    networks:
      - app-network

  dev:
    build:
      context: .
    environment: # used by aws sdk java v2. Ref https://docs.aws.amazon.com/sdkref/latest/guide/feature-ss-endpoints.html
      - AWS_DEFAULT_REGION=us-east-1
      - SAM_CLI_CONTAINER_CONNECTION_TIMEOUT=60
    depends_on:

      backend-infra-init:
        condition: service_completed_successfully
      api-gateway:
        condition: service_started
    #      websocket-gateway:
    #        condition: service_started
    volumes:
      - ~/.aws:/root/.aws:ro
      - "/var/run/docker.sock:/var/run/docker.sock"  # Allow this container to interact with host machine's Docker
      - ./local:/app
    command: [ "bash", "-c", "sleep infinity" ]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
